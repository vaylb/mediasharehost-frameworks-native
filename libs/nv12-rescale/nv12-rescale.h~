#ifndef ANDROID_MEDIA_RESCALE_YUV_NV12_H
#define ANDROID_MEDIA_RESCALE_YUV_NV12_H

namespace android {

class NV12Rescaler : public virtual RefBase
{
public:

            	 VideoShareSlave();

protected:
          virtual ~VideoShareSlave();
public:
				status_t 	setUpReceiver(String16 ip);
				bool		setVideoSurface(sp<Surface>& surface);
				void		sleep(long time);
				void start_threads();
				void stop_threads();

	enum BufState{
		can_read = 0,
		can_write
	};
	
	int 						mIndex;
	String16					mHostIp;
	sp<Surface>					mSurface;
	//unsigned char*				mRecvBuf[RECV_BUF_COUNT];	
	//BufState					mRecvBufState[RECV_BUF_COUNT];
	
	unsigned char*				mImageBuf;



	class VideoDecodecor: public Thread {

	public:
								VideoDecodecor(VideoShareSlave* videoshareslave);
    	virtual 				~VideoDecodecor();

    	virtual     bool        threadLoop();
		
					void		deCompressFromJPEG(unsigned char * src_buffer,unsigned long src_size,unsigned char** outbuf,int *width,int *height);
					void        threadLoop_exit();
					void        threadLoop_run();
					void		signalVideoPlayer();
					void		sleep(long time);
//					int			getEmptyBufferId();

	private:
		sp<VideoShareSlave>		mVideoShareSlave;
	};  // class VideoCompressor

	class VideoPlayer : public Thread {

	public:
			VideoPlayer(VideoShareSlave* host);
    		virtual ~VideoPlayer();
		    virtual     bool        threadLoop();
			void		YUV420Rotate90(unsigned char * dest,unsigned char * src, int width, int height, int rotation);
			void		videoPlayBack(unsigned char * image_buf,int width,int height);
			void		frameRender(const void *data, const sp<ANativeWindow> &nativeWindow,int width,int height);
			void        threadLoop_exit();
			void        threadLoop_run();

	private:
		sp<VideoShareSlave>		mVideoShareSlave;
		unsigned char*				mPlayBuf;
	};  // class HostPlayThread

	private:
		sp<VideoDecodecor>		mVideoDecodecor;
		sp<VideoPlayer>			mVideoPlayer;
};

}

#endif // ANDROID_MEDIA_RESCALE_YUV_NV12_H

